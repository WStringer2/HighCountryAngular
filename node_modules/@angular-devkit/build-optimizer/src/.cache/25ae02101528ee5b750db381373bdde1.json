{"remainingRequest":"/Users/oliverbachman/local-development/HighCountryAngular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/oliverbachman/local-development/HighCountryAngular/node_modules/core-js/modules/_to-primitive.js","dependencies":[{"path":"/Users/oliverbachman/local-development/HighCountryAngular/node_modules/core-js/modules/_to-primitive.js","mtime":1528143140794},{"path":"/Users/oliverbachman/local-development/HighCountryAngular/node_modules/cache-loader/dist/cjs.js","mtime":1528143140102},{"path":"/Users/oliverbachman/local-development/HighCountryAngular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528143137362}],"contextDependencies":[],"result":["// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n",null]}